name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1 # Change this to your desired region

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Apply patches
        run: npx patch-package

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            cdk.out/
          retention-days: 1

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Apply patches
        run: npx patch-package

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      # Add your test commands here
      # - name: Run tests
      #   run: npm test

  e2e:
    name: E2E Tests
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Apply patches
        run: npx patch-package

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e:ci

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
    name: Deploy
    needs: [build, test, e2e]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Apply patches
        run: npx patch-package

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK Deploy
        run:
          npx cdk deploy --require-approval never --outputs-file
          cdk-outputs.json
        env:
          CDK_DEPLOY_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEPLOY_REGION: ${{ env.AWS_REGION }}

      - name: Display Deployment Outputs
        run: |
          echo "🚀 Deployment completed successfully!"
          echo ""
          echo "📊 **Deployment Outputs:**"
          echo ""

          # Check if outputs file exists
          if [ -f cdk-outputs.json ]; then
            # Extract and display each output nicely
            DISTRIBUTION_DOMAIN=$(jq -r '.CdkStack.DistributionDomainName // "Not available"' cdk-outputs.json)
            DASHBOARD_URL=$(jq -r '.CdkStack.DashboardUrl // "Not available"' cdk-outputs.json)
            SNS_TOPIC_ARN=$(jq -r '.CdkStack.SNSTopicArn // "Not available"' cdk-outputs.json)
            
            echo "🌐 **CloudFront Distribution:**"
            echo "   Domain: $DISTRIBUTION_DOMAIN"
            echo ""
            echo "📈 **Monitoring Dashboard:**"
            echo "   URL: $DASHBOARD_URL"
            echo ""
            echo "📧 **Alerts Topic:**"
            echo "   SNS ARN: $SNS_TOPIC_ARN"
            echo ""
            echo "✨ **Quick Access Links:**"
            echo "   • Blog: https://jonwinsley.com"
            echo "   • Dashboard: $DASHBOARD_URL"
            echo ""
            echo "📋 **Raw CDK Outputs:**"
            cat cdk-outputs.json | jq '.'
          else
            echo "❌ CDK outputs file not found"
          fi

      - name: Set Job Outputs
        id: deployment
        run: |
          if [ -f cdk-outputs.json ]; then
            # Set outputs that can be used by other jobs/steps
            echo "distribution-domain=$(jq -r '.CdkStack.DistributionDomainName // ""' cdk-outputs.json)" >> $GITHUB_OUTPUT
            echo "dashboard-url=$(jq -r '.CdkStack.DashboardUrl // ""' cdk-outputs.json)" >> $GITHUB_OUTPUT
            echo "sns-topic-arn=$(jq -r '.CdkStack.SNSTopicArn // ""' cdk-outputs.json)" >> $GITHUB_OUTPUT
            echo "deployment-success=true" >> $GITHUB_OUTPUT
          else
            echo "deployment-success=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f cdk-outputs.json ]; then
            DISTRIBUTION_DOMAIN=$(jq -r '.CdkStack.DistributionDomainName // "Not available"' cdk-outputs.json)
            DASHBOARD_URL=$(jq -r '.CdkStack.DashboardUrl // "Not available"' cdk-outputs.json)
            SNS_TOPIC_ARN=$(jq -r '.CdkStack.SNSTopicArn // "Not available"' cdk-outputs.json)
            
            echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🌐 **Blog URL** | https://jonwinsley.com |" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 **CloudFront Domain** | \`$DISTRIBUTION_DOMAIN\` |" >> $GITHUB_STEP_SUMMARY
            echo "| 📈 **Monitoring Dashboard** | [Open Dashboard]($DASHBOARD_URL) |" >> $GITHUB_STEP_SUMMARY
            echo "| 📧 **SNS Topic ARN** | \`$SNS_TOPIC_ARN\` |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Quick Actions" >> $GITHUB_STEP_SUMMARY
            echo "- [🌐 Visit Blog](https://jonwinsley.com)" >> $GITHUB_STEP_SUMMARY
            echo "- [📊 View Performance Dashboard]($DASHBOARD_URL)" >> $GITHUB_STEP_SUMMARY
            echo "- [📧 Subscribe to Alerts](https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/topic/$SNS_TOPIC_ARN)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "CDK outputs were not generated properly." >> $GITHUB_STEP_SUMMARY
          fi
